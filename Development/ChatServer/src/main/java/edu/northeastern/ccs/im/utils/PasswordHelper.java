package edu.northeastern.ccs.im.utils;

import org.apache.commons.codec.binary.Base64;

import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;

/**
 * All of User Password processing and verifying
 */
// we could have a InternalError to hide interiror error but for now there is no need
@SuppressWarnings("squid:S00112")
public class PasswordHelper {
    private PasswordHelper() {
    }

    /**
     * get random salt
     *
     * @return 16 bytes random salt generated by SecureRandom
     */
    public static byte[] getSalt() {
        SecureRandom random = new SecureRandom();
        byte[] salt = new byte[16];
        random.nextBytes(salt);

        return salt;
    }

    /**
     * convert bytes to String so that can just store in mongoDB
     *
     * @param bytes salt or hash
     * @return base64String
     */
    public static String convertByteToString(byte[] bytes) {
        return Base64.encodeBase64String(bytes);
    }

    public static byte[] convertStringToByte(String input) {
        return Base64.decodeBase64(input);
    }

    /**
     * use PBKDF2WithHmacSHA1 to get hash with high security
     *
     * @param pw   password
     * @param salt salt
     * @return hash String
     */
    public static String getPasswordHashString(String pw, byte[] salt) {
        KeySpec spec = new PBEKeySpec(pw.toCharArray(), salt, 65536, 128);
        try {
            SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
            byte[] hash = factory.generateSecret(spec).getEncoded();
            return convertByteToString(hash);
        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            throw new RuntimeException("Error when generate pw hash");
        }
    }

    /**
     * @param pw   password that we want to verify
     * @param salt salt stored in db
     * @param hash hash stored in db
     * @return true if password is right, else false
     */
    public static boolean verifyPassword(String pw, String salt, String hash) {
        KeySpec spec = new PBEKeySpec(pw.toCharArray(), convertStringToByte(salt), 65536, 128);
        byte[] hashes;
        try {
            SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
            hashes = factory.generateSecret(spec).getEncoded();
        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            throw new RuntimeException("Error when generate pw hash");
        }
        return hash.equals(convertByteToString(hashes));
    }
}
